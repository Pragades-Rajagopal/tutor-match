// This client was generated by Platformatic from an OpenAPI specification.

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
/**  @type {import('./api-types.d.ts').setBaseUrl} */
export const setBaseUrl = (newUrl) => { baseUrl = newUrl }

/**  @type {import('./api-types.d.ts').Api['getUsers']} */
export const getUsers = async (request) => {
  const response = await fetch(`${baseUrl}/users/?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['createUser']} */
export const createUser = async (request) => {
  const response = await fetch(`${baseUrl}/users/`, {
    method:'post',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['updateUsers']} */
export const updateUsers = async (request) => {
  const response = await fetch(`${baseUrl}/users/`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getUserById']} */
export const getUserById = async (request) => {
  const response = await fetch(`${baseUrl}/users/${request.id}?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['updateUser']} */
export const updateUser = async (request) => {
  const response = await fetch(`${baseUrl}/users/${request.id}`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['deleteUsers']} */
export const deleteUsers = async (request) => {
  const response = await fetch(`${baseUrl}/users/${request.id}`, {
    method:'delete',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getStudentsForUser']} */
export const getStudentsForUser = async (request) => {
  const response = await fetch(`${baseUrl}/users/${request.id}/students?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getCourses']} */
export const getCourses = async (request) => {
  const response = await fetch(`${baseUrl}/courses/?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['createCourse']} */
export const createCourse = async (request) => {
  const response = await fetch(`${baseUrl}/courses/`, {
    method:'post',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['updateCourses']} */
export const updateCourses = async (request) => {
  const response = await fetch(`${baseUrl}/courses/`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getCourseById']} */
export const getCourseById = async (request) => {
  const response = await fetch(`${baseUrl}/courses/${request.id}?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['updateCourse']} */
export const updateCourse = async (request) => {
  const response = await fetch(`${baseUrl}/courses/${request.id}`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['deleteCourses']} */
export const deleteCourses = async (request) => {
  const response = await fetch(`${baseUrl}/courses/${request.id}`, {
    method:'delete',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getStudents']} */
export const getStudents = async (request) => {
  const response = await fetch(`${baseUrl}/students/?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['createStudent']} */
export const createStudent = async (request) => {
  const response = await fetch(`${baseUrl}/students/`, {
    method:'post',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['updateStudents']} */
export const updateStudents = async (request) => {
  const response = await fetch(`${baseUrl}/students/`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getStudentById']} */
export const getStudentById = async (request) => {
  const response = await fetch(`${baseUrl}/students/${request.id}?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['updateStudent']} */
export const updateStudent = async (request) => {
  const response = await fetch(`${baseUrl}/students/${request.id}`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['deleteStudents']} */
export const deleteStudents = async (request) => {
  const response = await fetch(`${baseUrl}/students/${request.id}`, {
    method:'delete',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getUserForStudent']} */
export const getUserForStudent = async (request) => {
  const response = await fetch(`${baseUrl}/students/${request.id}/student?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['postValidateOtp']} */
export const postValidateOtp = async (request) => {
  const response = await fetch(`${baseUrl}/validate-otp`, {
    method:'post',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['postLogin']} */
export const postLogin = async (request) => {
  const response = await fetch(`${baseUrl}/login`, {
    method:'post',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

